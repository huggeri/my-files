#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>

void inputStr(char *A, int n) // ввод строки
{
	printf("Enter string\n");
	gets_s(A, n);
}

bool check(char *A)
{
	bool alphabet = (*(A) >= 'A' && *(A) <= 'Z') || (*(A) >= 'a' && *(A) <= 'z');
	return alphabet;
}

char* longestWord(char *A) // поиск длинного слова и возвращение адреса его начала
{
	int maxLen = 0, len = 0;
	char* firstLong = A; // возвращаемое значение
	for (int i = 0; *(A + i) != '\0'; i++) // идём по строке до символа конца строки
	{
		while (check(A + i)) // цикл для рассчёта длины одного слова
			len++, i++;
		if (len > maxLen) // если длина очередного слова больше длины самого длинного в строке
		{
			maxLen = len; // тогда очередное - самое длинное
			firstLong = A + i - len; // и присваиваем переменной b адрес первого символа этого слова
		}
		len = 0; // обвнуляем переменную длины, чтобы верно вычислить длину следующего слова
		if (*(A + i) == '\0') // если текущий элемент является символом конца стрвинуться на один элемент назад. 
							  // Это нужно для того, чтобы не выйти за пределы массива, т.к. при выходе из while у нас i уже увелшичился на 1.
			i--;
	}
	return firstLong; // возвращаем адрес первого символа самого длинного слова в строке
}

int countWords(char *A) // функция для рассчёта количества слов в исходной строке, возвращает значение целочисленного типа - колв-о слов
{
	int cnt = 0, i = 1;
	if (check(A))
		cnt++;
	while (*(A + i) != '\0')
	{
		if (check(A + i) && !check(A + i - 1))
			cnt++;
		i++;
	}
	return cnt;
}

void transfer(char *A, char *B) // функция переноса слов в нужном порядке из массива A в массив B
{
	*B = '\0';
	if (*A != '\0') // проверка того, что исходная строка не пуста
	{
		int i, len;
		char* firstLong = A; // инициализация адреса
		if (countWords(A) > 0) // если в исходной строке есть хотя бы одно слово
		{
			firstLong = longestWord(A); // находим адрес начала самого длинного слова (или единственного) в строке
			for (i = 0; check(firstLong + i); i++) // копируем самое длинное слово из исходной строки в новую строку
			{
				*(B + i) = *(firstLong + i);
			}
			len = i; // нам нужна длина скопированного слова
			*(B + len) = ' '; // чтобы ограничить его, отделить от других слов в новой строке
			for (i = i - len; i >= len && *(firstLong + i + len) != '\0'; i++) // стираем скопированное слово из исходной строки, чтобы оно нам не мешало
																			   // при следущем поиске длинного слова
				*(firstLong + i) = *(firstLong + i + len);
			if (*(firstLong + i + len) == '\0') // переносим остатки строки, если они есть
				*(firstLong + i) = '\0';
			else
			{
				while (*(firstLong + i + len) != '\0')
				{
					*(firstLong + i) = *(firstLong + i + len);
					i++;
				}
				*(firstLong + i) = '\0';
			}
			transfer(A, B + len + 1); // рекурсия для поиска очередного самого длинного слова в исходной строке из оставшихся			
		}
	}
}

void main()
{
	int n = 100;
	char* A = (char*)malloc(n * sizeof(char));
	char* B = (char*)malloc(n * sizeof(char));

	inputStr(A, n);
	transfer(A, B);
	free(A);
	puts(B);
	free(B);

	system("pause");
}
