//вариант 4: название экзамена, дата экзамена, фамилия преподавателя, количество оценок, оценки - перечень поей структурированнй переменной

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>
#include <locale.h>
#include <iostream>

struct exam //переменная
{
	char name[100];
	char teacherSername[22];
	int dd, mm, yyyy, countMarks;
	char marks[11];
	bool filled = false;
};
//прототипы некоторых функций
exam* getNewExam(exam* dataBase);//заполнение 1 записи
void showOne(exam* dataBase, bool noteFounded, int index);//показать 1 запись
int compareDate(exam* a, exam* b);//сравнение дат
int enterIndex(exam *dataBase, int n);//ввод индекса для добавления, редактирования, удаления записи или её демонстрации
void menues(int flag);//вывод меню
void addNew(exam* dataBase, int index);//добавление 1 записи
int converting(char string[]);//преобразование в целочисленный тип

void editing(exam* dataBase, int index, int n)//редактирование записи
{
	if (index < n)
	{
		int option = 0;
		if (!(dataBase + index)->filled)//если не заполнена
		{
			showOne(dataBase + index, (dataBase + index)->filled, index);//вывод информации об этом
			(dataBase + index)->filled = true;
		}
		else
		{
			printf("Пожалуйста, просмотрите найденную запись:\n");
			showOne(dataBase + index, (dataBase + index)->filled, index);
		}
		menues(1);
		scanf_s("%d", &option);
		switch (option)
		{
		case 1:
		{
			printf("Введите название экзамена.\n");
			std::cin.ignore(1);
			gets_s((dataBase + index)->name);
			fflush(stdin);
			break;
		}
		case 2:
		{
			printf("Введите фамилию преподавателя.\n");
			std::cin.ignore(1);
			gets_s((dataBase + index)->teacherSername);
			fflush(stdin);
			break;
		}
		case 3:
		{
			printf("Введите дату экзамена в формате DD, нажмите Enter. Затем, введите месяц в виде MM, нажимите Enter. Введите год в формате YYYY.\n");
			scanf_s("%d", &(dataBase + index)->dd);
			scanf_s("%d", &(dataBase + index)->mm);
			scanf_s("%d", &(dataBase + index)->yyyy);
			break;
		}
		case 4:
		{
			printf("Введите оценки.\n");
			std::cin.ignore(1);
			gets_s((dataBase + index)->marks);
			fflush(stdin);
			int i = 0;
			(dataBase + index)->countMarks = 0;
			while ((dataBase + index)->marks[i] != '\0')
			{
				if ((dataBase + index)->marks[i] >= '0' && (dataBase + index)->marks[i] <= '9')
					((dataBase + index)->countMarks)++;
				i++;
			}
			break;
		}
		default:
			printf("Нет такой опции.\n");
		}
		printf("Новые данные сохранены.\n");
	}
	else
		printf("Запись пуста/не найдена!\n");
}

exam* getNewExam(exam* dataBase)//зaполнение новой записи
{
	exam* regular = dataBase;
	regular->filled = true;
	std::cin.ignore(1);
	printf("Введите название экзамена.\n");
	gets_s(regular->name);
	printf("Введите фамилию преподавателя.\n");
	gets_s(regular->teacherSername);
	fflush(stdin);
	printf("Введите дату экзамена в формате DD, нажмите Enter. Затем, введите месяц в виде MM, нажимите Enter. Введите год в формате YYYY.\n");
	scanf_s("%d", &regular->dd);
	scanf_s("%d", &regular->mm);
	scanf_s("%d", &regular->yyyy);
	printf("Введите оценки.\n");
	std::cin.ignore(1);
	gets_s(regular->marks);
	fflush(stdin);
	int i = 0;
	regular->countMarks = 0;
	while (regular->marks[i] != '\0')
	{
		if (regular->marks[i] >= '0' && regular->marks[i] <= '9')
			(regular->countMarks)++;
		i++;
	}
	return regular;
}

void filling(exam* dataBase, int n)//заполнение базы
{
	for (int i = 0; i < n; i++)
	{
		addNew(dataBase, i);
	}
}	

void addNew(exam* dataBase, int index)
{
	if (!(dataBase + index)->filled)
	{
		*(dataBase + index) = *getNewExam(dataBase + index);
		printf("Запись добавлена\n");
	}
	else
	{
		printf("Здесь уже есть запись. Вот она:\n");
		showOne(dataBase + index, (dataBase + index)->filled, index);
		printf("Вы можете удалить или редактировать её\n");
	}
}

void deleteOne(exam* dataBase, int index, int n)//удаление одной записи
{
	if (index < n)
	{
		if (!(dataBase + index)->filled)
			showOne(dataBase + index, (dataBase + index)->filled, index);
		else
		{
			(dataBase + index)->filled = false;
			printf("Запись удалена!\n");
		}
	}
	else
		printf("Запись пуста/не найдена!\n");
}

void clean(exam* dataBase, int n)//очистка
{
	for (int i = 0; i < n; i++)
	{
		(dataBase + i)->filled = false;
	}
}

void showAll(exam* dataBase, int n)//показать всё
{
	int i = 0;
	printf("     %20sНазвание дисциплины\tФамилия преподавателя\tДД.ММ.ГГГГ"
		"\tОценки\tВсего оценок\n", "");
	for (int j = 0; j < n; j++)
	{
		if (!(dataBase + j)->filled)
			showOne(dataBase + j, (dataBase + j)->filled, j);
		else
		{
			showOne(dataBase + j, (dataBase + j)->filled, j);
			i++;
		}
	}
	printf("Всего %d записей в базе.\n", i);
}

void showFilled(exam* dataBase, int n)//показать заполненные
{
	int i = 0;
	printf("     %20sНазвание дисциплины\tФамилия преподавателя\tДД.ММ.ГГГГ"
		"\tОценки\tВсего оценок\n", "");
	for (int j = 0; j < n; j++)
	{
		if ((dataBase + j)->filled)
		{
			showOne(dataBase + j, (dataBase + j)->filled, j);
			i++;
		}
	}
	printf("Всего %d записей в базе.\n", i);
}

void research(exam* dataBase, int n)//поиск
{
	printf("Введите фамилию преподавателя, или название экзамена целиком либо частично"
		", или месяц, за который хотите просмотреть список экзаменов, или номер записи "
		"от 0 до %d. Месяц вводить в формате mm. Пожалуйста, при вводе фамилии либо слов "
		"из названия используйте словесный аналог цифр, если они там есть, например: не '6', а 'шесть'.\n", n - 1);
	std::cin.ignore(1);
	char enterStr[100];
	gets_s(enterStr);
	fflush(stdin);
	int cnt = 0, monthOrIndex = 0, j = 0;
	bool noteFounded = false;
	for (int i = 0; enterStr[i] != '\0'; i++)//ищем число - есть ли цифры во введенной строке
		if (enterStr[i] >= '0' && enterStr[i] <= '9')
			cnt++;
	if (cnt != 0 && strlen(enterStr) == cnt)//если введено число и только оно
		monthOrIndex = converting(enterStr);//преобразуем его в целочисленный тип
	for (j = 0; j < n; j++)//сравниваем с параметрами в записях введенную строку
	{
		if ((dataBase + j)->filled) //если запись заполнена
		{
			if (strlen(enterStr) != 0)
			{

				if ((dataBase + j)->mm == monthOrIndex || strstr((dataBase + j)->teacherSername, enterStr)
					|| strstr((dataBase + j)->name, enterStr))//если 
					//месяц совпадает с введенным значением или, если введённая строка найдена в строке "фамилия", или если введенная
					//строка является подстрокой названия
				{
					noteFounded = true;//когда найдено совпадение
					showOne(dataBase + j, noteFounded, j);//выводим
				}
			}
			else
			{
				if (strlen((dataBase + j)->teacherSername) == strlen(enterStr) || strlen((dataBase + j)->name) == strlen(enterStr))
				{
					noteFounded = true;//когда найдено совпадение
					showOne(dataBase + j, noteFounded, j);//выводим
				}
			}
		}
	}
	if (!noteFounded)//не было найдено ни одного совпадения
		showOne(dataBase + j, noteFounded, j);
}

void showOne(exam* dataBase, bool noteFounded, int index)//показать одну
{
	if (noteFounded)
		printf("№%d %40s\t%22s\t%2d.%2d.%4d\t%s\t%5d\n", (index + 1), dataBase->name,
														dataBase->teacherSername,
														dataBase->dd,
														dataBase->mm,
														dataBase->yyyy,
														dataBase->marks,
														dataBase->countMarks);
	else
		printf("Запись пуста/не найдена!\n");
}

void keyTable(exam *dataBase, int n)//таблица ключей
{
	printf("Это таблица ключей, где можно посмотреть, записи под каким номером пусты (0), а в каких содержатся данные (1):\n");
	for (int i = 0; i < n; i++)
	{
		printf("№%d\t%d;\n", (i + 1), (dataBase + i)->filled);
	}
}

int enterIndex(exam *dataBase, int n)//ввод индекса для добавления, редактирования, удаления записи или её демонстрации
{
	int index = 0;
	printf("Максимальное количество записей - %d. Если нужно расширить базу - введите нужное "
		"значение при добавлении новой записи. Введите номер записи:\n", n);
	scanf_s("%d", &index);
	while(index <= 0)
	{
		printf("Это значение не допустимо! Введите значение больше 0.");
		scanf_s("%d", &index);
	}
	return index - 1;
}

int compareDate(exam* a, exam* b)//сравнение дат
{
	int resultCompare = 0;
	if (a->yyyy == b->yyyy)
	{
		if (a->mm == b->mm)
		{
			if (a->dd == b->dd)
				resultCompare = 0;
			else
			{
				if (a->dd < b->dd)
					resultCompare = -1;
				else
					resultCompare = 1;
			}
		}
		else
		{
			if (a->mm < b->mm)
				resultCompare = -1;
			else
				resultCompare = 1;
		}
	}
	else
	{
		if (a->yyyy < b->yyyy)
			resultCompare = -1;
		else
			resultCompare = 1;
	}
	return resultCompare;
}

void sortAllNotes(exam *dataBase, int a, int b)//сортировка по фамилии преподавателя и по дате
{
	if (b - a > 1)
	{
		int d = (a + b) / 2;
		sortAllNotes(dataBase, a, d);
		sortAllNotes(dataBase, d, b);

		int i = 0, j = 0;
		exam *B = (exam*)malloc((b - a) * sizeof(exam));
		while (i < d - a && j < b - d)
		{
			if (compareDate((dataBase + a + i), (dataBase + d + j)) == 0)
			{
				if (strcmp((dataBase + a + i)->name, (dataBase + d + j)->name) == 0)
				{
					if (strcmp((dataBase + a + i)->teacherSername, (dataBase + d + j)->teacherSername) <= 0)
					{
						*(B + i + j) = *(dataBase + a + i);
						i++;
					}
					else
					{
						*(B + i + j) = *(dataBase + d + j);
						j++;
					}
				}
				else
				{
					if (strcmp((dataBase + a + i)->name, (dataBase + d + j)->name) < 0)
					{

						*(B + i + j) = *(dataBase + a + i);
						i++;
					}
					else
					{
						*(B + i + j) = *(dataBase + d + j);
						j++;
					}
				}
			}
			else
			{
				if (compareDate((dataBase + a + i), (dataBase + d + j)) < 0)
				{
					*(B + i + j) = *(dataBase + a + i);
					i++;
				}
				else
				{
					*(B + i + j) = *(dataBase + d + j);
					j++;
				}
			}
		}
		while (i < d - a)
		{
			*(B + i + j) = *(dataBase + a + i);
			i++;
		}
		while (j < b - d)
		{
			*(B + i + j) = *(dataBase + d + j);
			j++;
		}
		for (i = 0; i < b - a; i++)
			*(dataBase + a + i) = *(B + i);
		free(B);
	}
}

void menues(int flag)
{
	switch (flag)
	{
	case 0:
	{
		printf("Меню программы"
			"\n1 - Посмотреть меню ещё раз\n2 - Заполнить базу\n3 - Сортировать базу\n"
			"4 - Добавить запись\n5 - Редактировать запись\n6 - Удалить запись\n"
			"7 - Поиск записей\n8 - Посмотреть заполненные записи\n9 - Посмотреть все записи\n"
			"10 - Очистить базу\n11 - Посмотреть таблицу ключей\n12 - Выйти из программы (база будет удалена)\n"
			"Вводите значение, соответвующее действию, которое хотите совершить с базой данных.\n\n");
		break;
	}
	case 1:
	{
		printf("Меню редактирования\nВы хотите изменить:\n1 - название предмета\n2 - фамилию преподавателя\n"
			"3 - дату экзамена\n4 - оценки\nВведите нужное значение далее:\n");
		break;
	}
	default:
		printf("Ошибка!");
	}
}

int converting(char string[])
{
	int sub = 0, result = 0;
	for (int i = 0; string[i] != '\0'; i++)//преобразуем в int
	{
			sub = string[i] - '0';
			if (string[i + 1] != '\0')
				sub *= 10;
			result += sub;
	}
	return result;
}

void main()
{
	setlocale(LC_ALL, "RUS");
	int n = 5;
	exam* dataBaseTemp = 0;
	exam* dataBase = (exam*)malloc(n * sizeof(exam));
	clean(dataBase, n);
	menues(0);
	bool cnt = true;
	for (bool cicle = true; cicle != !cicle; cicle = !cicle)
	{
		int option = 0;
		printf("Введите, что вы хотите сделать:\n");
		scanf_s("%d", &option);
		switch(option)
		{
		case 1:
		{
			menues(0);
			break;
		}
		case 2:
		{
			filling(dataBase, n);
			break;
		}
		case 3:
		{
			int a = 0, b = n;
			sortAllNotes(dataBase, a, b);
			printf("База данных сортирована.\n");
			break;
		}
		case 4:
		{
			int index = enterIndex(dataBase, n);
			if (index >= n)
			{
				if (cnt)
				{
					dataBaseTemp = (exam*)malloc((index + 1) * sizeof(exam));
					clean(dataBaseTemp, index + 1);
					for (int i = 0; i < n; i++)
						*(dataBaseTemp + i) = *(dataBase + i);
					free(dataBase);
					dataBase = dataBaseTemp;
					n = index + 1;
					cnt = false;
				}
				else
				{
					dataBase = (exam*)malloc((index + 1) * sizeof(exam));
					clean(dataBase, index + 1);
					for (int i = 0; i < n; i++)
						*(dataBase + i) = *(dataBaseTemp + i);
					free(dataBaseTemp);
					n = index + 1;
					cnt = true;
				}
			}
			addNew(dataBase, index);
			break;
		}
		case 5:
		{
			editing(dataBase, enterIndex(dataBase, n), n);
			break;
		}
		case 6:
		{
			deleteOne(dataBase, enterIndex(dataBase, n), n);
			break;
		}
		case 7:
		{
			research(dataBase, n);
			break;
		}
		case 8:
		{
			showFilled(dataBase, n);
			break;
		}
		case 9:
		{
			showAll(dataBase, n);
			break;
		}
		case 10:
		{
			int answer = 0;
			printf("Вы уверены, что хотите очистить всё? Введите значение: 1 - да, 0 - нет.\n");
			scanf_s("%d", &answer);
			switch (answer)
			{
			case 0:
				break;
			case 1:
			{
				clean(dataBase, n);
				printf("База очищена. Изменения сохранены.\n");
				break;
			}
			default:
				printf("Нет такой опции.\n");
			}
			break;
		}
		case 11:
		{
			keyTable(dataBase, n);
			break;
		}
		case 12:
		{
			if (cnt)
				free(dataBase);
			else
				free(dataBaseTemp); 
			exit(EXIT_SUCCESS);
		}
		default:
			printf("Нет такой опции.\n");
		}
	}
}
